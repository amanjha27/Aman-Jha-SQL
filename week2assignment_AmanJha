a)	Stored Procedures
1)	Create a procedure InsertOrderDetails that takes OrderID, ProductID, Unit Price, Quantiy, Discount as input parameters and inserts that order information in the Order Details table. After each order inserted, check the @@rowcount value to make sure that order was inserted properly. If for any reason the order was not inserted, print the message: Failed to place the order. Please try again. Also, your procedure should have these functionalities: -
	Make the UnitPrice and Discount parameters optional.
	If no UnitPrice is given, then use the UnitPrice value from the product table.
	If no Discount is given, then use a discount of 0.
	Adjust the quantity in stock (UnitsInStock) for the product by subtracting the quantity sold from inventory.
	However, if there is not enough of a product in stock, then abort the stored procedure without making any changes to the database.
	Print a message if the quantity in stock of a product drops below its Reorder Level because of the update.
Code: 
CREATE PROCEDURE InsertOrderDetails
    @OrderID int,
    @ProductID int,
    @OrderUnitPrice money = NULL,
    @OrderQuantity int,
    @OrderDiscount money = NULL
AS
BEGIN
    SET NOCOUNT ON;

    IF @OrderUnitPrice IS NULL
    BEGIN
        SELECT @OrderUnitPrice = UnitPrice 
        FROM Production.Product 
        WHERE ProductID = @ProductID;
    END

    IF @OrderDiscount IS NULL
    BEGIN
        SET @OrderDiscount = 0;
    END

    BEGIN TRANSACTION
    BEGIN TRY
        -- Check the stock availability
        DECLARE @UnitsInStock int;
        DECLARE @ReorderLevel int;

        SELECT @UnitsInStock = UnitsInStock, @ReorderLevel = ReorderLevel 
        FROM Production.Product 
        WHERE ProductID = @ProductID;

        IF @UnitsInStock < @OrderQuantity
        BEGIN
            RAISERROR('Not enough stock', 16, 1);
            ROLLBACK TRANSACTION;
            RETURN;
        END

        INSERT INTO Sales.OrderDetails (OrderID, ProductID, UnitPrice, OrderQty, Discount)
        VALUES (@OrderID, @ProductID, @OrderUnitPrice, @OrderQuantity, @OrderDiscount);

        IF @@ROWCOUNT = 0
        BEGIN
            RAISERROR('Failed to place the order. Please try again.', 16, 1);
            ROLLBACK TRANSACTION;
            RETURN;
        END

        UPDATE Production.Product
        SET UnitsInStock = UnitsInStock - @OrderQuantity
        WHERE ProductID = @ProductID;

        IF @@ROWCOUNT = 0
        BEGIN
            RAISERROR('Failed to update the stock. Please try again.', 16, 1);
            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF @UnitsInStock - @OrderQuantity < @ReorderLevel
        BEGIN
            PRINT 'Warning: Quantity in stock for ProductID ' + CAST(@ProductID AS nvarchar(10)) + ' has dropped below its Reorder Level.';
        END

        -- Commit the transaction
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        -- Rollback the transaction in case of any errors
        ROLLBACK TRANSACTION;
        RAISERROR('Failed to place the order. Please try again.', 16, 1);
    END CATCH
END


2)	Create a procedure UpdateOrderDetails that takes OrderID, ProductID, Unit Price, Quantity, and discount, and updates these values for that ProductID in that Order. All the parameters except the OrderlD and ProductID should be optional so that if the user wants to only update Quantity she should be able to do so without providing the rest of the values. You need to also make sure that if any of the values are being passed in as NULL, then you want to retain the original value instead of overwriting it with NULL. To accomplish this, look for the ISNULL() function in google or sql server books online. Adjust the UnitsInStock value in products table accordingly.
Code: 
CREATE PROCEDURE UpdateOrderDetails
    @OrderID int,
    @ProductID int,
    @NewUnitPrice money = NULL,
    @NewQuantity int = NULL,
    @NewDiscount money = NULL
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @CurrentUnitPrice money;
    DECLARE @CurrentQuantity int;
    DECLARE @CurrentDiscount money;
    DECLARE @OriginalQuantity int;

    SELECT @CurrentUnitPrice = UnitPrice,
           @CurrentQuantity = OrderQty,
           @CurrentDiscount = Discount
    FROM Sales.OrderDetails
    WHERE OrderID = @OrderID AND ProductID = @ProductID;

    SET @NewUnitPrice = ISNULL(@NewUnitPrice, @CurrentUnitPrice);
    SET @NewQuantity = ISNULL(@NewQuantity, @CurrentQuantity);
    SET @NewDiscount = ISNULL(@NewDiscount, @CurrentDiscount);

    SELECT @OriginalQuantity = OrderQty
    FROM Sales.OrderDetails
    WHERE OrderID = @OrderID AND ProductID = @ProductID;

    UPDATE Sales.OrderDetails
    SET UnitPrice = @NewUnitPrice,
        OrderQty = @NewQuantity,
        Discount = @NewDiscount
    WHERE OrderID = @OrderID AND ProductID = @ProductID;

    IF @@ROWCOUNT = 0
    BEGIN
        RAISERROR('No records found', 16, 1);
        RETURN;
    END

    UPDATE Production.Product
    SET UnitsInStock = UnitsInStock + @OriginalQuantity - @NewQuantity
    WHERE ProductID = @ProductID;

    IF @@ROWCOUNT = 0
    BEGIN
        RAISERROR('Failed to update product stock. Please try again.', 16, 1);
    END
END

3)	Create a procedure GetOrderDetails that takes OrderID as input parameter and returns all the records for that OrderID. If no records are found in the Order Details table, then it should print the line: "The OrderID XXXX does not exits", where XXX should be the OrderID entered by the user and the procedure should RETURN the value 1.
Code: 
CREATE PROCEDURE GetOrderDetails
    @OrderID int
AS
BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM Sales.OrderDetails WHERE OrderID = @OrderID)
    BEGIN
        PRINT 'The OrderID ' + CONVERT(varchar(10), @OrderID) + ' does not exist';
        RETURN 1;
    END
    ELSE
    BEGIN
        SELECT * FROM Sales.OrderDetails WHERE OrderID = @OrderID;
    END
END

4)	Create a procedure DeleteOrderDetails that takes OrderID and ProductID and deletes that from Order Details table. Your procedure should validate parameters. It should return an error code (-1) and print a message if the parameters are invalid. Parameters are valid if the given order ID appears in the table and if the given product ID appears in that order.
Code: 
CREATE PROCEDURE DeleteOrderDetails
    @OrderID int,
    @ProductID int
AS
BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM Sales.OrderDetails WHERE OrderID = @OrderID AND ProductID = @ProductID)
    BEGIN
        RAISERROR('Invalid parameters', 16, 1);
        RETURN -1;
    END
    ELSE
    BEGIN
        DELETE FROM Sales.OrderDetails WHERE OrderID = @OrderID AND ProductID = @ProductID;
    END

    RETURN 0;
END


--- Review SQL Server date formats on this website and then create following functions
     http://www.sql-server-helper.com/tips/date-formats.aspx

b)	Functions
1)	Create a function that takes an input parameter type datetime and returns the date in the format MM/DD/YYYY. For example, if I pass in '2006-11-21 23:34:05.920", the output of the functions should be 11/21/2006.
Code: 
CREATE FUNCTION FormatDate_MMDDYYYY (@datetime datetime)
RETURNS varchar(10)
AS
BEGIN
    RETURN CONVERT(varchar(10), CONVERT(date, @datetime), 101)
END

2)	Create a function that takes an input parameter type datetime and returns the date in the format YYYYMMDD.
Code: 
CREATE FUNCTION FormatDate_YYYYMMDD (@datetime datetime)
RETURNS varchar(8)
AS
BEGIN
    RETURN CONVERT(varchar(8), @datetime, 112)
END

c)	Views
1)	Create a view vwCustomerOrders which returns CompanyName OrderID OrderDate, ProductID Product Name Quantity Unit Price, Quantity od Unit Price.
Code: 
CREATE VIEW vwCustomerOrders AS
SELECT
c.CompanyName,
soh.SalesOrderID AS OrderID,
soh.OrderDate,
sod.ProductID,
p.Name AS ProductName,
sod.OrderQty AS Quantity,
sod.UnitPrice,
sod.OrderQty * sod.UnitPrice AS TotalPrice
FROM
Sales.Customer AS c
INNER JOIN Sales.SalesOrderHeader AS soh ON c.CustomerID = soh.CustomerID
INNER JOIN Sales.SalesOrderDetail AS sod ON soh.SalesOrderID = sod.SalesOrderID
INNER JOIN Production.Product AS p ON sod.ProductID = p.ProductID;

SELECT * FROM vwCustomerOrders;

2)	Create a copy of the above view and modify it so that it only returns the above information for orders that were placed yesterday.
Code: 
CREATE VIEW vwCustomerOrdersYesterday AS
SELECT 
    c.AccountNumber,
    soh.SalesOrderID AS OrderID,
    soh.OrderDate,
    sod.ProductID,
    p.Name AS ProductName,
    sod.OrderQty AS Quantity,
    sod.UnitPrice,
    sod.OrderQty * sod.UnitPrice AS TotalPrice
FROM 
    Sales.Customer AS c
    INNER JOIN Sales.SalesOrderHeader AS soh ON c.CustomerID = soh.CustomerID
    INNER JOIN Sales.SalesOrderDetail AS sod ON soh.SalesOrderID = sod.SalesOrderID
    INNER JOIN Production.Product AS p ON sod.ProductID = p.ProductID
WHERE 
    CAST(soh.OrderDate AS DATE) = CAST(GETDATE() - 1 AS DATE)
    
    
SELECT * FROM vwCustomerOrdersYesterday;

3)	Use a CREATE VIEW statement to create a view called MyProducts. Your view shoukl contain the ProductID, Product Name, Quantity PerUnit and Unit Price columns from the Products table. It should also contain the Company Name column from the Suppliers table and the CategoryName column from the Categories table. Your view should only contain products that are not discontinued.
Code: 
CREATE VIEW MyProducts AS
SELECT 
    p.ProductID,
    p.ProductName,
    p.QuantityPerUnit,
    p.UnitPrice,
    s.CompanyName,
    c.CategoryName
FROM 
    Production.Product AS p
    INNER JOIN Purchasing.Supplier AS s ON p.SupplierID = s.BusinessEntityID
    INNER JOIN Production.ProductCategory AS c ON p.ProductCategoryID = c.ProductCategoryID
WHERE 
    p.Discontinued = 0
    
    
SELECT * FROM MyProducts;

d)	Triggers
1)	If someone cancels an order in northwind database, then you want to delete that order from the Orders table. But you will not be able to delete that Order before deleting the records from Order Details table for that order due to referential integrity constraints. Create an Instead of Delete trigger on Orders table so that if someone tries to delete an Order that trigger gets fired and that trigger should first delete everything in order details table and then delete that order from the Orders table.
Code: 
USE Northwind;

CREATE TRIGGER DeleteOrderWithDetails
ON Orders
INSTEAD OF DELETE
AS
BEGIN
    -- Delete records from Order Details table first
    DELETE FROM [Order Details]
    WHERE OrderID IN (SELECT OrderID FROM deleted);

    -- Now delete the order from the Orders table
    DELETE FROM Orders
    WHERE OrderID IN (SELECT OrderID FROM deleted);
END;

2)	When an order is placed for X units of product Y, we must first check the Products table to ensure that there is sufficient stock to fill the order. This trigger will operate on the Order Details table. If sufficient stock exists, then fill the order and decrement X units from the UnitsInStock column in Products. If insufficient stock exists, then refuse the order (ie. do not insert it) and notify the user that the order could not be filled because of insufficient stock.
Code: 
CREATE TRIGGER CheckStockAndFillOrder
ON [Order Details]
INSTEAD OF INSERT
AS
BEGIN
    -- Check if there is sufficient stock for each order detail
    IF EXISTS (
        SELECT od.ProductID, p.UnitsInStock, SUM(od.Quantity) AS RequiredUnits
        FROM inserted od
        INNER JOIN Products p ON od.ProductID = p.ProductID
        GROUP BY od.ProductID, p.UnitsInStock
        HAVING SUM(od.Quantity) <= p.UnitsInStock
    )
    BEGIN
        -- Sufficient stock available, fill the order and decrement UnitsInStock
        DECLARE @ProductID INT;
        DECLARE @Quantity INT;

        DECLARE order_cursor CURSOR FOR
            SELECT ProductID, Quantity FROM inserted;

        OPEN order_cursor;
        FETCH NEXT FROM order_cursor INTO @ProductID, @Quantity;

        WHILE @@FETCH_STATUS = 0
        BEGIN
            UPDATE Products
            SET UnitsInStock = UnitsInStock - @Quantity
            WHERE ProductID = @ProductID;

            FETCH NEXT FROM order_cursor INTO @ProductID, @Quantity;
        END;

        CLOSE order_cursor;
        DEALLOCATE order_cursor;

        -- Insert the order details into the table
        INSERT INTO [Order Details]
        SELECT * FROM inserted;
    END
    ELSE
    BEGIN
        -- Insufficient stock, refuse the order and notify the user
        RAISERROR ('Order could not be filled due to insufficient stock.', 16, 1);
    END
END;
